AI FRONTEND FORM GENERATOR PROMPT
=====================================

You are an expert frontend developer specializing in creating dynamic forms that integrate with backend APIs. Your task is to generate complete, production-ready forms for a content management system that creates collection items (events, news, programmes, posts, sources).

SYSTEM ARCHITECTURE:
===================

The backend expects data in this exact format:
```json
{
  "type": "event|news|programme|post|source",
  "data": {
    "title": "string (required)",
    "slug": "string (required)",
    "status": "published|draft",
    // ... type-specific fields
  }
}
```

API ENDPOINTS:
=============
- POST /api/collection-items (creates with mapper validation)
- POST /api/prompt-to-item (AI-powered creation)
- GET /api/collection-items (list all)
- GET /api/collection-items/type/{type} (filter by type)

COLLECTION TYPES & FIELDS:
==========================

1. EVENT FIELDS:
   - title* (string)
   - slug* (string)
   - status (published/draft)
   - arabicTitle (string)
   - eventDate (date)
   - endDate (date)
   - time (string)
   - city (string)
   - address (string)
   - locationLink (url)
   - featured (boolean)
   - thumbnail (object: {url, alt})
   - heroImage (object: {url, alt})
   - programmeLabel (object: {id, slug})
   - tags (array of {id, slug})
   - contactDetails (string)
   - rsvpLink (url)
   - livestreamLink (url)

2. NEWS FIELDS:
   - title* (string)
   - slug* (string)
   - status (published/draft)
   - externalLink (url)
   - datePublished (date)
   - sources (object: {id, slug})
   - summary (text)
   - featured (boolean)
   - thumbnail (object: {url, alt})
   - programmeLabel (object: {id, slug})
   - relatedProgrammes (array of {id, slug})

3. PROGRAMME FIELDS:
   - title* (string)
   - slug* (string)
   - status (published/draft)
   - nameArabic (string)
   - missionEnglish (text)
   - missionArabic (text)
   - yearEstablished (number)
   - yearClosed (number)
   - headquartersEnglish (string)
   - website (url)
   - lab (boolean)
   - logoSvgDark (object: {url, alt})
   - logoSvgLight (object: {url, alt})
   - partners (array of {id, slug})

4. POST FIELDS:
   - title* (string)
   - slug* (string)
   - status (published/draft)
   - datePublished (date)
   - seoTitle (string)
   - seoMeta (text)
   - bodyEnglish (rich text)
   - bodyArabic (rich text)
   - featured (boolean)
   - thumbnail (object: {url, alt})
   - mainImage (object: {url, alt})
   - tags (array of {id, slug})

5. SOURCE FIELDS:
   - title* (string)
   - slug* (string)
   - status (published/draft)
   - nameArabic (string)
   - shortNameEnglish (string)
   - logo (object: {url, alt})

FORM REQUIREMENTS:
=================

1. **Framework**: Use React with TypeScript
2. **Styling**: Use Tailwind CSS for modern, clean design
3. **Validation**: Client-side validation for required fields
4. **Auto-generation**: Auto-generate slug from title
5. **Dynamic**: Show/hide fields based on collection type
6. **API Integration**: Submit data in correct format
7. **Error Handling**: Display API errors gracefully
8. **Success States**: Show success message and option to create another
9. **Preview**: Option to preview data before submission
10. **Responsive**: Mobile-friendly design

FORM STRUCTURE TEMPLATE:
=======================

```typescript
interface FormData {
  type: 'event' | 'news' | 'programme' | 'post' | 'source';
  data: {
    title: string;
    slug: string;
    status: 'published' | 'draft';
    [key: string]: any;
  };
}
```

REQUIRED FORM COMPONENTS:
========================

1. **Type Selector**: Dropdown/tabs to select collection type
2. **Core Fields**: Title, slug (auto-generated), status
3. **Dynamic Fields**: Show fields based on selected type
4. **Image Upload**: For thumbnail, hero images, logos
5. **Rich Text Editor**: For long text fields
6. **Tag Selector**: Multi-select for tags/categories
7. **Date Picker**: For dates
8. **URL Validator**: For external links
9. **Preview Modal**: Show formatted data before submission
10. **Submit Button**: With loading states

SLUG GENERATION LOGIC:
=====================
```javascript
const generateSlug = (title: string): string => {
  return title
    .toLowerCase()
    .replace(/[^a-z0-9\s-]/g, '')
    .replace(/\s+/g, '-')
    .replace(/--+/g, '-')
    .replace(/^-|-$/g, '');
};
```

API SUBMISSION FORMAT:
=====================
```javascript
const submitForm = async (formData: FormData) => {
  const response = await fetch('/api/collection-items', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({
      type: formData.type,
      data: formData.data
    })
  });
  
  if (response.ok) {
    const result = await response.json();
    // Handle success
  } else {
    // Handle error
  }
};
```

VALIDATION RULES:
================
- Title: Required, min 3 characters
- Slug: Required, unique, URL-safe
- Dates: Valid date format, future dates for events
- URLs: Valid URL format
- Images: Valid image URLs or file uploads
- Status: Must be 'published' or 'draft'

AI PROMPT INTEGRATION:
=====================
Add an "AI Generate" button that allows users to describe what they want to create:

```javascript
const aiGenerate = async (prompt: string, type: string) => {
  const response = await fetch('/api/prompt-to-item', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({
      prompt,
      collectionType: type,
      saveToDatabase: false // Preview first
    })
  });
  
  // Pre-fill form with AI-generated data
};
```

DESIGN GUIDELINES:
=================
- Clean, minimal interface
- Clear visual hierarchy
- Consistent spacing (Tailwind classes)
- Accessible form labels and ARIA attributes
- Loading states for all async operations
- Error states with helpful messages
- Success states with clear next actions
- Mobile-first responsive design

EXAMPLE IMPLEMENTATION REQUEST:
==============================

"Create a complete React TypeScript component for a dynamic collection item form. The form should:

1. Allow selection of collection type (event, news, programme, post, source)
2. Dynamically show relevant fields based on type selection
3. Auto-generate slugs from titles
4. Include proper TypeScript interfaces
5. Use Tailwind CSS for styling
6. Include form validation
7. Submit data to the API in the correct format
8. Handle loading and error states
9. Include an AI generation feature
10. Be fully responsive and accessible

The component should be production-ready and include all necessary imports, interfaces, and helper functions."

ADDITIONAL FEATURES TO INCLUDE:
==============================
- Save as draft functionality
- Form auto-save (localStorage)
- Field tooltips with helpful information
- Bulk upload for multiple items
- Form templates for common use cases
- Preview mode showing how the item will appear
- Duplicate existing item functionality
- Form wizard for complex items

TESTING REQUIREMENTS:
=====================
- Unit tests for form validation
- Integration tests for API submission
- Accessibility testing
- Cross-browser compatibility
- Mobile device testing

This prompt will generate forms that perfectly integrate with your mapper system and create properly structured collection items! ðŸš€
